Developer docs for microspec
============================

The ``microspec`` package is a wrapper to simplify using the API
auto-generated by the ``microspeclib`` package.

About microspeclib
------------------

``microspeclib`` provides an API for:

- sending **commands** over USB to the Chromation Spectrometer
  dev-kit
- receiving the **responses** to those commands

This API simplifies USB communication by hiding serial
communication details from the application.

Internally, ``microspeclib`` auto-generates the API from a JSON
file. This makes the API easy to modify at the expense of being
user-friendly.

Make microspeclib user-friendly
-------------------------------

``microspec`` is the top-level package in the ``microspec``
**project**. Applications should import ``microspec``, not
``microspeclib``. The ``microspec`` **package** wraps the
``microspeclib`` package.

Benefits to **application developers**:

- better documentation of the commands and responses
- default parameter values when sending commands
- a dictionary of API constants
- a simpler/shorter/more-intuitive ``import`` statement
- incorporates solutions to known issues (e.g., dropped frames)

Provide **API developers** (contributors to ``microspeclib``)
with wrappers for commands and responses. The wrappers create a
seam to add custom code and docstrings.

Package Description
-------------------
The interface defined by ``microspeclib`` is auto-generated. This
makes the interface easy to extend: just one JSON file to edit,
one test suite to run, and one set of documentation to rebuild.
But this automation prevents customization on a per-command and
per-response basis.

The end result is that ``microspeclib.simple``, the API intended for
writing applications, is usable but missing some friendly features:

- default parameter values for API calls
- simple access to the names of the API global constants
- a namespace that only goes one level-deep for:
    - importing the packge
    - reading documentation with pydoc

And for developers building on `microspeclib`, auto-generated code means
there are no function definitions for placing:

- docstrings
- helper functions

Helper functions take the burden of responsibility from the application:

- converting between firmware units of time and seconds
- patching serial communication problems that cause dropped frames and
  garbled communication of parameter values

This package adds all of the above functionality with class ``Devkit``.

``Devkit`` inherits ``MicroSpecSimpleInterface`` and overrides
each method with a one-liner that calls the ``super().method``,
creating a place to add:

- default parameter values
- docstrings
- helpers
- serial communication patches

The override methods are also a place to intercept the command's
response to:

- re-package it with string names in place of integer codes
- add a ``__repr__()``
    - eliminates the need to ``print()`` responses when working
      in a REPL
